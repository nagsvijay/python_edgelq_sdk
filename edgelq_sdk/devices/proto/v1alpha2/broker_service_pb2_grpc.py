# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from edgelq_sdk.devices.proto.v1alpha2 import broker_custom_pb2 as edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in edgelq_sdk/devices/proto/v1alpha2/broker_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BrokerServiceStub(object):
    """Broker service API for Devices
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListenForConnections = channel.stream_stream(
                '/ntt.devices.v1alpha2.BrokerService/ListenForConnections',
                request_serializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ListenForConnectionsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ListenForConnectionsResponse.FromString,
                _registered_method=True)
        self.OpenConnectionChannelSocket = channel.stream_stream(
                '/ntt.devices.v1alpha2.BrokerService/OpenConnectionChannelSocket',
                request_serializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.OpenConnectionChannelSocketRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.OpenConnectionChannelSocketResponse.FromString,
                _registered_method=True)
        self.ConnectToDevice = channel.stream_stream(
                '/ntt.devices.v1alpha2.BrokerService/ConnectToDevice',
                request_serializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ConnectToDeviceRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ConnectToDeviceResponse.FromString,
                _registered_method=True)


class BrokerServiceServicer(object):
    """Broker service API for Devices
    """

    def ListenForConnections(self, request_iterator, context):
        """ListenForConnections
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OpenConnectionChannelSocket(self, request_iterator, context):
        """OpenConnectionChannelSocket
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConnectToDevice(self, request_iterator, context):
        """ConnectToDevice
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListenForConnections': grpc.stream_stream_rpc_method_handler(
                    servicer.ListenForConnections,
                    request_deserializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ListenForConnectionsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ListenForConnectionsResponse.SerializeToString,
            ),
            'OpenConnectionChannelSocket': grpc.stream_stream_rpc_method_handler(
                    servicer.OpenConnectionChannelSocket,
                    request_deserializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.OpenConnectionChannelSocketRequest.FromString,
                    response_serializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.OpenConnectionChannelSocketResponse.SerializeToString,
            ),
            'ConnectToDevice': grpc.stream_stream_rpc_method_handler(
                    servicer.ConnectToDevice,
                    request_deserializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ConnectToDeviceRequest.FromString,
                    response_serializer=edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ConnectToDeviceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ntt.devices.v1alpha2.BrokerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ntt.devices.v1alpha2.BrokerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BrokerService(object):
    """Broker service API for Devices
    """

    @staticmethod
    def ListenForConnections(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ntt.devices.v1alpha2.BrokerService/ListenForConnections',
            edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ListenForConnectionsRequest.SerializeToString,
            edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ListenForConnectionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def OpenConnectionChannelSocket(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ntt.devices.v1alpha2.BrokerService/OpenConnectionChannelSocket',
            edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.OpenConnectionChannelSocketRequest.SerializeToString,
            edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.OpenConnectionChannelSocketResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConnectToDevice(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ntt.devices.v1alpha2.BrokerService/ConnectToDevice',
            edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ConnectToDeviceRequest.SerializeToString,
            edgelq__sdk_dot_devices_dot_proto_dot_v1alpha2_dot_broker__custom__pb2.ConnectToDeviceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
