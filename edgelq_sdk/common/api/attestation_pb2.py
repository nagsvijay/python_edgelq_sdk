# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: edgelq-sdk/common/api/attestation.proto
# Protobuf Python Version: 5.27.2
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    27,
    2,
    '',
    'edgelq-sdk/common/api/attestation.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\'edgelq-sdk/common/api/attestation.proto\x12\x07ntt.api\"\xa0\x04\n\x0e\x44\x65viceIdentity\x12\x15\n\rserial_number\x18\x01 \x01(\t\x12\x14\n\x0cmanufacturer\x18\x02 \x01(\t\x12\x14\n\x0cproduct_name\x18\x03 \x01(\t\x12(\n\x0btpm_version\x18\x04 \x01(\x0e\x32\x13.ntt.api.TpmVersion\x12\x12\n\nek_tpm_pub\x18\x05 \x01(\x0c\x12\x0e\n\x06\x65kcert\x18\x06 \x01(\x0c\x12\x11\n\tekcerturl\x18\x07 \x01(\t\x12\x1b\n\x13idevid_cert_tpm_pub\x18\x08 \x01(\x0c\x12\x13\n\x0bidevid_cert\x18\t \x01(\x0c\x12\x1b\n\x13ldevid_cert_tpm_pub\x18\n \x01(\x0c\x12\x13\n\x0bldevid_cert\x18\x0b \x01(\x0c\x12<\n\tak_params\x18\x0c \x01(\x0b\x32).ntt.api.DeviceIdentity.AttestationParams\x12\x41\n\x10\x63hallenge_format\x18\r \x01(\x0e\x32\'.ntt.api.DeviceIdentity.ChallengeFormat\x1a\\\n\x11\x41ttestationParams\x12\r\n\x05\x61kpub\x18\x01 \x01(\x0c\x12\x15\n\rcreation_data\x18\x02 \x01(\x0c\x12\x0e\n\x06\x61ttest\x18\x03 \x01(\x0c\x12\x11\n\tsignature\x18\x04 \x01(\x0c\"\'\n\x0f\x43hallengeFormat\x12\x14\n\x10TPM20_CREDENTIAL\x10\x00\"\xb8\x03\n\x11IdentityChallenge\x12\"\n\x1aplatform_attestation_nonce\x18\x01 \x01(\x0c\x12\x1f\n\x17\x63red_encrypted_by_ekpub\x18\x02 \x01(\x0c\x12\"\n\x1asecret_encrypted_by_ekcred\x18\x03 \x01(\x0c\x12$\n\x1c\x63red_encrypted_by_idevid_pub\x18\x04 \x01(\x0c\x12\'\n\x1fsecret_encrypted_by_idevid_cred\x18\x05 \x01(\x0c\x12$\n\x1c\x63red_encrypted_by_ldevid_pub\x18\x06 \x01(\x0c\x12\'\n\x1fsecret_encrypted_by_ldevid_cred\x18\x07 \x01(\x0c\x12\"\n\x1a\x64igest_to_sign_with_idevid\x18\x08 \x01(\x0c\x12)\n!rsa_secret_to_decrypt_with_idevid\x18\t \x01(\x0c\x12\"\n\x1a\x64igest_to_sign_with_ldevid\x18\n \x01(\x0c\x12)\n!rsa_secret_to_decrypt_with_ldevid\x18\x0b \x01(\x0c\"\xb6\x03\n\x19IdentityChallengeResponse\x12&\n\x1e\x61k_activation_decrypted_secret\x18\x01 \x01(\x0c\x12*\n\"idevid_activation_decrypted_secret\x18\x02 \x01(\x0c\x12*\n\"ldevid_activation_decrypted_secret\x18\x03 \x01(\x0c\x12\x1f\n\x17\x64igest_signed_by_idevid\x18\x04 \x01(\x0c\x12\x1f\n\x17\x64igest_signed_by_ldevid\x18\x05 \x01(\x0c\x12!\n\x19rsa_decrypted_with_idevid\x18\x06 \x01(\x0c\x12!\n\x19rsa_decrypted_with_ldevid\x18\x07 \x01(\x0c\x12\x38\n\x06quotes\x18\x08 \x03(\x0b\x32(.ntt.api.IdentityChallengeResponse.Quote\x12\x1a\n\x04pcrs\x18\t \x03(\x0b\x32\x0c.ntt.api.PCR\x12\x10\n\x08\x65ventlog\x18\n \x01(\x0c\x1a)\n\x05Quote\x12\r\n\x05quote\x18\x01 \x01(\x0c\x12\x11\n\tsignature\x18\x02 \x01(\x0c\"a\n\x03PCR\x12\r\n\x05index\x18\x01 \x01(\r\x12\x12\n\ndigest_hex\x18\x02 \x01(\t\x12&\n\ndigest_alg\x18\x03 \x01(\x0e\x32\x12.ntt.api.DigestAlg\x12\x0f\n\x07\x63omment\x18\x04 \x01(\t*6\n\nTpmVersion\x12\x10\n\x0cTPMVAGNOSTIC\x10\x00\x12\n\n\x06TPMV12\x10\x01\x12\n\n\x06TPMV20\x10\x02*!\n\tDigestAlg\x12\x08\n\x04SHA1\x10\x00\x12\n\n\x06SHA256\x10\x01\x42\x41\n\x0e\x63om.ntt.api.pbP\x01Z-github.com/cloudwan/edgelq-sdk/common/api;apib\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'edgelq_sdk.common.api.attestation_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  _globals['DESCRIPTOR']._loaded_options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\016com.ntt.api.pbP\001Z-github.com/cloudwan/edgelq-sdk/common/api;api'
  _globals['_TPMVERSION']._serialized_start=1582
  _globals['_TPMVERSION']._serialized_end=1636
  _globals['_DIGESTALG']._serialized_start=1638
  _globals['_DIGESTALG']._serialized_end=1671
  _globals['_DEVICEIDENTITY']._serialized_start=53
  _globals['_DEVICEIDENTITY']._serialized_end=597
  _globals['_DEVICEIDENTITY_ATTESTATIONPARAMS']._serialized_start=464
  _globals['_DEVICEIDENTITY_ATTESTATIONPARAMS']._serialized_end=556
  _globals['_DEVICEIDENTITY_CHALLENGEFORMAT']._serialized_start=558
  _globals['_DEVICEIDENTITY_CHALLENGEFORMAT']._serialized_end=597
  _globals['_IDENTITYCHALLENGE']._serialized_start=600
  _globals['_IDENTITYCHALLENGE']._serialized_end=1040
  _globals['_IDENTITYCHALLENGERESPONSE']._serialized_start=1043
  _globals['_IDENTITYCHALLENGERESPONSE']._serialized_end=1481
  _globals['_IDENTITYCHALLENGERESPONSE_QUOTE']._serialized_start=1440
  _globals['_IDENTITYCHALLENGERESPONSE_QUOTE']._serialized_end=1481
  _globals['_PCR']._serialized_start=1483
  _globals['_PCR']._serialized_end=1580
# @@protoc_insertion_point(module_scope)
