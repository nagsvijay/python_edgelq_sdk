# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from edgelq_sdk.logging.proto.v1 import log_descriptor_pb2 as edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2
from edgelq_sdk.logging.proto.v1 import log_descriptor_service_pb2 as edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in edgelq_sdk/logging/proto/v1/log_descriptor_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LogDescriptorServiceStub(object):
    """LogDescriptor service API for Logging
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLogDescriptor = channel.unary_unary(
                '/ntt.logging.v1.LogDescriptorService/GetLogDescriptor',
                request_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.GetLogDescriptorRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.FromString,
                _registered_method=True)
        self.BatchGetLogDescriptors = channel.unary_unary(
                '/ntt.logging.v1.LogDescriptorService/BatchGetLogDescriptors',
                request_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.BatchGetLogDescriptorsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.BatchGetLogDescriptorsResponse.FromString,
                _registered_method=True)
        self.ListLogDescriptors = channel.unary_unary(
                '/ntt.logging.v1.LogDescriptorService/ListLogDescriptors',
                request_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.ListLogDescriptorsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.ListLogDescriptorsResponse.FromString,
                _registered_method=True)
        self.WatchLogDescriptor = channel.unary_stream(
                '/ntt.logging.v1.LogDescriptorService/WatchLogDescriptor',
                request_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorResponse.FromString,
                _registered_method=True)
        self.WatchLogDescriptors = channel.unary_stream(
                '/ntt.logging.v1.LogDescriptorService/WatchLogDescriptors',
                request_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorsResponse.FromString,
                _registered_method=True)
        self.CreateLogDescriptor = channel.unary_unary(
                '/ntt.logging.v1.LogDescriptorService/CreateLogDescriptor',
                request_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.CreateLogDescriptorRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.FromString,
                _registered_method=True)
        self.UpdateLogDescriptor = channel.unary_unary(
                '/ntt.logging.v1.LogDescriptorService/UpdateLogDescriptor',
                request_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.UpdateLogDescriptorRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.FromString,
                _registered_method=True)
        self.DeleteLogDescriptor = channel.unary_unary(
                '/ntt.logging.v1.LogDescriptorService/DeleteLogDescriptor',
                request_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.DeleteLogDescriptorRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class LogDescriptorServiceServicer(object):
    """LogDescriptor service API for Logging
    """

    def GetLogDescriptor(self, request, context):
        """GetLogDescriptor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetLogDescriptors(self, request, context):
        """BatchGetLogDescriptors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLogDescriptors(self, request, context):
        """ListLogDescriptors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchLogDescriptor(self, request, context):
        """WatchLogDescriptor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchLogDescriptors(self, request, context):
        """WatchLogDescriptors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateLogDescriptor(self, request, context):
        """CreateLogDescriptor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLogDescriptor(self, request, context):
        """UpdateLogDescriptor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLogDescriptor(self, request, context):
        """DeleteLogDescriptor
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LogDescriptorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLogDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLogDescriptor,
                    request_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.GetLogDescriptorRequest.FromString,
                    response_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.SerializeToString,
            ),
            'BatchGetLogDescriptors': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetLogDescriptors,
                    request_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.BatchGetLogDescriptorsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.BatchGetLogDescriptorsResponse.SerializeToString,
            ),
            'ListLogDescriptors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLogDescriptors,
                    request_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.ListLogDescriptorsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.ListLogDescriptorsResponse.SerializeToString,
            ),
            'WatchLogDescriptor': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchLogDescriptor,
                    request_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorRequest.FromString,
                    response_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorResponse.SerializeToString,
            ),
            'WatchLogDescriptors': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchLogDescriptors,
                    request_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorsResponse.SerializeToString,
            ),
            'CreateLogDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateLogDescriptor,
                    request_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.CreateLogDescriptorRequest.FromString,
                    response_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.SerializeToString,
            ),
            'UpdateLogDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLogDescriptor,
                    request_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.UpdateLogDescriptorRequest.FromString,
                    response_serializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.SerializeToString,
            ),
            'DeleteLogDescriptor': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLogDescriptor,
                    request_deserializer=edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.DeleteLogDescriptorRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ntt.logging.v1.LogDescriptorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ntt.logging.v1.LogDescriptorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LogDescriptorService(object):
    """LogDescriptor service API for Logging
    """

    @staticmethod
    def GetLogDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.logging.v1.LogDescriptorService/GetLogDescriptor',
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.GetLogDescriptorRequest.SerializeToString,
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetLogDescriptors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.logging.v1.LogDescriptorService/BatchGetLogDescriptors',
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.BatchGetLogDescriptorsRequest.SerializeToString,
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.BatchGetLogDescriptorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListLogDescriptors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.logging.v1.LogDescriptorService/ListLogDescriptors',
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.ListLogDescriptorsRequest.SerializeToString,
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.ListLogDescriptorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchLogDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ntt.logging.v1.LogDescriptorService/WatchLogDescriptor',
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorRequest.SerializeToString,
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchLogDescriptors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ntt.logging.v1.LogDescriptorService/WatchLogDescriptors',
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorsRequest.SerializeToString,
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.WatchLogDescriptorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateLogDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.logging.v1.LogDescriptorService/CreateLogDescriptor',
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.CreateLogDescriptorRequest.SerializeToString,
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLogDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.logging.v1.LogDescriptorService/UpdateLogDescriptor',
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.UpdateLogDescriptorRequest.SerializeToString,
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__pb2.LogDescriptor.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteLogDescriptor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.logging.v1.LogDescriptorService/DeleteLogDescriptor',
            edgelq__sdk_dot_logging_dot_proto_dot_v1_dot_log__descriptor__service__pb2.DeleteLogDescriptorRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
