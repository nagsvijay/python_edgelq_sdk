# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from edgelq_sdk.proxies.proto.v1 import broker_custom_pb2 as edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in edgelq_sdk/proxies/proto/v1/broker_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class BrokerServiceStub(object):
    """Broker service API for Proxies
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.stream_stream(
                '/ntt.proxies.v1.BrokerService/Connect',
                request_serializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ConnectRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.Listen = channel.stream_stream(
                '/ntt.proxies.v1.BrokerService/Listen',
                request_serializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ListenRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ListenResponse.FromString,
                _registered_method=True)
        self.Accept = channel.stream_stream(
                '/ntt.proxies.v1.BrokerService/Accept',
                request_serializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.AcceptRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.AcceptResponse.FromString,
                _registered_method=True)


class BrokerServiceServicer(object):
    """Broker service API for Proxies
    """

    def Connect(self, request_iterator, context):
        """Connect
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Listen(self, request_iterator, context):
        """Listen
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Accept(self, request_iterator, context):
        """Accept
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.stream_stream_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ConnectRequest.FromString,
                    response_serializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ConnectResponse.SerializeToString,
            ),
            'Listen': grpc.stream_stream_rpc_method_handler(
                    servicer.Listen,
                    request_deserializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ListenRequest.FromString,
                    response_serializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ListenResponse.SerializeToString,
            ),
            'Accept': grpc.stream_stream_rpc_method_handler(
                    servicer.Accept,
                    request_deserializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.AcceptRequest.FromString,
                    response_serializer=edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.AcceptResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ntt.proxies.v1.BrokerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ntt.proxies.v1.BrokerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BrokerService(object):
    """Broker service API for Proxies
    """

    @staticmethod
    def Connect(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ntt.proxies.v1.BrokerService/Connect',
            edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ConnectRequest.SerializeToString,
            edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Listen(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ntt.proxies.v1.BrokerService/Listen',
            edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ListenRequest.SerializeToString,
            edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.ListenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Accept(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/ntt.proxies.v1.BrokerService/Accept',
            edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.AcceptRequest.SerializeToString,
            edgelq__sdk_dot_proxies_dot_proto_dot_v1_dot_broker__custom__pb2.AcceptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
