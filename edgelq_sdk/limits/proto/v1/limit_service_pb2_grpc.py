# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from edgelq_sdk.limits.proto.v1 import limit_custom_pb2 as edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__custom__pb2
from edgelq_sdk.limits.proto.v1 import limit_pb2 as edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2
from edgelq_sdk.limits.proto.v1 import limit_service_pb2 as edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in edgelq_sdk/limits/proto/v1/limit_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LimitServiceStub(object):
    """Limit service API for Limits
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLimit = channel.unary_unary(
                '/ntt.limits.v1.LimitService/GetLimit',
                request_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.GetLimitRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.FromString,
                _registered_method=True)
        self.BatchGetLimits = channel.unary_unary(
                '/ntt.limits.v1.LimitService/BatchGetLimits',
                request_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.BatchGetLimitsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.BatchGetLimitsResponse.FromString,
                _registered_method=True)
        self.ListLimits = channel.unary_unary(
                '/ntt.limits.v1.LimitService/ListLimits',
                request_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.ListLimitsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.ListLimitsResponse.FromString,
                _registered_method=True)
        self.WatchLimit = channel.unary_stream(
                '/ntt.limits.v1.LimitService/WatchLimit',
                request_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitResponse.FromString,
                _registered_method=True)
        self.WatchLimits = channel.unary_stream(
                '/ntt.limits.v1.LimitService/WatchLimits',
                request_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitsResponse.FromString,
                _registered_method=True)
        self.UpdateLimit = channel.unary_unary(
                '/ntt.limits.v1.LimitService/UpdateLimit',
                request_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.UpdateLimitRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.FromString,
                _registered_method=True)
        self.DeleteLimit = channel.unary_unary(
                '/ntt.limits.v1.LimitService/DeleteLimit',
                request_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.DeleteLimitRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.MigrateLimitSource = channel.unary_unary(
                '/ntt.limits.v1.LimitService/MigrateLimitSource',
                request_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__custom__pb2.MigrateLimitSourceRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.FromString,
                _registered_method=True)


class LimitServiceServicer(object):
    """Limit service API for Limits
    """

    def GetLimit(self, request, context):
        """GetLimit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetLimits(self, request, context):
        """BatchGetLimits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLimits(self, request, context):
        """ListLimits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchLimit(self, request, context):
        """WatchLimit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchLimits(self, request, context):
        """WatchLimits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateLimit(self, request, context):
        """UpdateLimit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteLimit(self, request, context):
        """DeleteLimit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MigrateLimitSource(self, request, context):
        """MigrateLimitSource
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LimitServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLimit,
                    request_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.GetLimitRequest.FromString,
                    response_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.SerializeToString,
            ),
            'BatchGetLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetLimits,
                    request_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.BatchGetLimitsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.BatchGetLimitsResponse.SerializeToString,
            ),
            'ListLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLimits,
                    request_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.ListLimitsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.ListLimitsResponse.SerializeToString,
            ),
            'WatchLimit': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchLimit,
                    request_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitRequest.FromString,
                    response_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitResponse.SerializeToString,
            ),
            'WatchLimits': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchLimits,
                    request_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitsResponse.SerializeToString,
            ),
            'UpdateLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateLimit,
                    request_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.UpdateLimitRequest.FromString,
                    response_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.SerializeToString,
            ),
            'DeleteLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteLimit,
                    request_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.DeleteLimitRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'MigrateLimitSource': grpc.unary_unary_rpc_method_handler(
                    servicer.MigrateLimitSource,
                    request_deserializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__custom__pb2.MigrateLimitSourceRequest.FromString,
                    response_serializer=edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ntt.limits.v1.LimitService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ntt.limits.v1.LimitService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LimitService(object):
    """Limit service API for Limits
    """

    @staticmethod
    def GetLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.limits.v1.LimitService/GetLimit',
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.GetLimitRequest.SerializeToString,
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.limits.v1.LimitService/BatchGetLimits',
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.BatchGetLimitsRequest.SerializeToString,
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.BatchGetLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.limits.v1.LimitService/ListLimits',
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.ListLimitsRequest.SerializeToString,
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.ListLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ntt.limits.v1.LimitService/WatchLimit',
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitRequest.SerializeToString,
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ntt.limits.v1.LimitService/WatchLimits',
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitsRequest.SerializeToString,
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.WatchLimitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.limits.v1.LimitService/UpdateLimit',
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.UpdateLimitRequest.SerializeToString,
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.limits.v1.LimitService/DeleteLimit',
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__service__pb2.DeleteLimitRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MigrateLimitSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.limits.v1.LimitService/MigrateLimitSource',
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__custom__pb2.MigrateLimitSourceRequest.SerializeToString,
            edgelq__sdk_dot_limits_dot_proto_dot_v1_dot_limit__pb2.Limit.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
