# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from edgelq_sdk.iam.proto.v1alpha2 import condition_pb2 as edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2
from edgelq_sdk.iam.proto.v1alpha2 import condition_service_pb2 as edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in edgelq_sdk/iam/proto/v1alpha2/condition_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ConditionServiceStub(object):
    """Condition service API for IAM
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCondition = channel.unary_unary(
                '/ntt.iam.v1alpha2.ConditionService/GetCondition',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.GetConditionRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.FromString,
                _registered_method=True)
        self.BatchGetConditions = channel.unary_unary(
                '/ntt.iam.v1alpha2.ConditionService/BatchGetConditions',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.BatchGetConditionsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.BatchGetConditionsResponse.FromString,
                _registered_method=True)
        self.ListConditions = channel.unary_unary(
                '/ntt.iam.v1alpha2.ConditionService/ListConditions',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.ListConditionsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.ListConditionsResponse.FromString,
                _registered_method=True)
        self.WatchCondition = channel.unary_stream(
                '/ntt.iam.v1alpha2.ConditionService/WatchCondition',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionResponse.FromString,
                _registered_method=True)
        self.WatchConditions = channel.unary_stream(
                '/ntt.iam.v1alpha2.ConditionService/WatchConditions',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionsResponse.FromString,
                _registered_method=True)
        self.CreateCondition = channel.unary_unary(
                '/ntt.iam.v1alpha2.ConditionService/CreateCondition',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.CreateConditionRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.FromString,
                _registered_method=True)
        self.UpdateCondition = channel.unary_unary(
                '/ntt.iam.v1alpha2.ConditionService/UpdateCondition',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.UpdateConditionRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.FromString,
                _registered_method=True)
        self.DeleteCondition = channel.unary_unary(
                '/ntt.iam.v1alpha2.ConditionService/DeleteCondition',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.DeleteConditionRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ConditionServiceServicer(object):
    """Condition service API for IAM
    """

    def GetCondition(self, request, context):
        """GetCondition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetConditions(self, request, context):
        """BatchGetConditions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConditions(self, request, context):
        """ListConditions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchCondition(self, request, context):
        """WatchCondition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchConditions(self, request, context):
        """WatchConditions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCondition(self, request, context):
        """CreateCondition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCondition(self, request, context):
        """UpdateCondition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCondition(self, request, context):
        """DeleteCondition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConditionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCondition': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCondition,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.GetConditionRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.SerializeToString,
            ),
            'BatchGetConditions': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetConditions,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.BatchGetConditionsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.BatchGetConditionsResponse.SerializeToString,
            ),
            'ListConditions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConditions,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.ListConditionsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.ListConditionsResponse.SerializeToString,
            ),
            'WatchCondition': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchCondition,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionResponse.SerializeToString,
            ),
            'WatchConditions': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchConditions,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionsResponse.SerializeToString,
            ),
            'CreateCondition': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCondition,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.CreateConditionRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.SerializeToString,
            ),
            'UpdateCondition': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCondition,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.UpdateConditionRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.SerializeToString,
            ),
            'DeleteCondition': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCondition,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.DeleteConditionRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ntt.iam.v1alpha2.ConditionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ntt.iam.v1alpha2.ConditionService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ConditionService(object):
    """Condition service API for IAM
    """

    @staticmethod
    def GetCondition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.ConditionService/GetCondition',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.GetConditionRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetConditions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.ConditionService/BatchGetConditions',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.BatchGetConditionsRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.BatchGetConditionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListConditions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.ConditionService/ListConditions',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.ListConditionsRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.ListConditionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchCondition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ntt.iam.v1alpha2.ConditionService/WatchCondition',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchConditions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ntt.iam.v1alpha2.ConditionService/WatchConditions',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionsRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.WatchConditionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateCondition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.ConditionService/CreateCondition',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.CreateConditionRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCondition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.ConditionService/UpdateCondition',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.UpdateConditionRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__pb2.Condition.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCondition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.ConditionService/DeleteCondition',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_condition__service__pb2.DeleteConditionRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
