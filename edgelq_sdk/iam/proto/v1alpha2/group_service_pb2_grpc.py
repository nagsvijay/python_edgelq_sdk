# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from edgelq_sdk.iam.proto.v1alpha2 import group_pb2 as edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2
from edgelq_sdk.iam.proto.v1alpha2 import group_service_pb2 as edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in edgelq_sdk/iam/proto/v1alpha2/group_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GroupServiceStub(object):
    """Group service API for IAM
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGroup = channel.unary_unary(
                '/ntt.iam.v1alpha2.GroupService/GetGroup',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.FromString,
                _registered_method=True)
        self.BatchGetGroups = channel.unary_unary(
                '/ntt.iam.v1alpha2.GroupService/BatchGetGroups',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.BatchGetGroupsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.BatchGetGroupsResponse.FromString,
                _registered_method=True)
        self.ListGroups = channel.unary_unary(
                '/ntt.iam.v1alpha2.GroupService/ListGroups',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.ListGroupsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.ListGroupsResponse.FromString,
                _registered_method=True)
        self.WatchGroup = channel.unary_stream(
                '/ntt.iam.v1alpha2.GroupService/WatchGroup',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupResponse.FromString,
                _registered_method=True)
        self.WatchGroups = channel.unary_stream(
                '/ntt.iam.v1alpha2.GroupService/WatchGroups',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupsRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupsResponse.FromString,
                _registered_method=True)
        self.CreateGroup = channel.unary_unary(
                '/ntt.iam.v1alpha2.GroupService/CreateGroup',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.FromString,
                _registered_method=True)
        self.UpdateGroup = channel.unary_unary(
                '/ntt.iam.v1alpha2.GroupService/UpdateGroup',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.UpdateGroupRequest.SerializeToString,
                response_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.FromString,
                _registered_method=True)
        self.DeleteGroup = channel.unary_unary(
                '/ntt.iam.v1alpha2.GroupService/DeleteGroup',
                request_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.DeleteGroupRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class GroupServiceServicer(object):
    """Group service API for IAM
    """

    def GetGroup(self, request, context):
        """GetGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetGroups(self, request, context):
        """BatchGetGroups
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroups(self, request, context):
        """ListGroups
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchGroup(self, request, context):
        """WatchGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WatchGroups(self, request, context):
        """WatchGroups
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateGroup(self, request, context):
        """CreateGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGroup(self, request, context):
        """UpdateGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """DeleteGroup
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.GetGroupRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.SerializeToString,
            ),
            'BatchGetGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetGroups,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.BatchGetGroupsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.BatchGetGroupsResponse.SerializeToString,
            ),
            'ListGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroups,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.ListGroupsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.ListGroupsResponse.SerializeToString,
            ),
            'WatchGroup': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchGroup,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupResponse.SerializeToString,
            ),
            'WatchGroups': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchGroups,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupsRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupsResponse.SerializeToString,
            ),
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.CreateGroupRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.SerializeToString,
            ),
            'UpdateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGroup,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.UpdateGroupRequest.FromString,
                    response_serializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.DeleteGroupRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ntt.iam.v1alpha2.GroupService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ntt.iam.v1alpha2.GroupService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GroupService(object):
    """Group service API for IAM
    """

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.GroupService/GetGroup',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.GetGroupRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.GroupService/BatchGetGroups',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.BatchGetGroupsRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.BatchGetGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.GroupService/ListGroups',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.ListGroupsRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.ListGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ntt.iam.v1alpha2.GroupService/WatchGroup',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WatchGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/ntt.iam.v1alpha2.GroupService/WatchGroups',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupsRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.WatchGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.GroupService/CreateGroup',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.CreateGroupRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.GroupService/UpdateGroup',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.UpdateGroupRequest.SerializeToString,
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__pb2.Group.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ntt.iam.v1alpha2.GroupService/DeleteGroup',
            edgelq__sdk_dot_iam_dot_proto_dot_v1alpha2_dot_group__service__pb2.DeleteGroupRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
